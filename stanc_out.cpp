// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace modelb38a751d76082_stanmodelcode_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "modelb38a751d76082_stanmodelcode");
    reader.add_event(69, 67, "end", "modelb38a751d76082_stanmodelcode");
    return reader;
}

class modelb38a751d76082_stanmodelcode
  : public stan::model::model_base_crtp<modelb38a751d76082_stanmodelcode> {
private:
        int Nz;
        int Nq;
        int Nskill;
        int Ninteraction;
        int Nprofile;
        std::vector<int> interaction_qids;
        std::vector<std::vector<int> > interaction_in_profile;
        std::vector<std::vector<int> > Q;
        std::vector<std::vector<int> > skill_in_profile;
        std::vector<std::vector<int> > X;
public:
    modelb38a751d76082_stanmodelcode(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    modelb38a751d76082_stanmodelcode(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "modelb38a751d76082_stanmodelcode_namespace::modelb38a751d76082_stanmodelcode";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "Nz", "int", context__.to_vec());
            Nz = int(0);
            vals_i__ = context__.vals_i("Nz");
            pos__ = 0;
            Nz = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nz", Nz, 0);

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "Nq", "int", context__.to_vec());
            Nq = int(0);
            vals_i__ = context__.vals_i("Nq");
            pos__ = 0;
            Nq = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nq", Nq, 0);

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Nskill", "int", context__.to_vec());
            Nskill = int(0);
            vals_i__ = context__.vals_i("Nskill");
            pos__ = 0;
            Nskill = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nskill", Nskill, 0);

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "Ninteraction", "int", context__.to_vec());
            Ninteraction = int(0);
            vals_i__ = context__.vals_i("Ninteraction");
            pos__ = 0;
            Ninteraction = vals_i__[pos__++];
            check_greater_or_equal(function__, "Ninteraction", Ninteraction, 0);

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "Nprofile", "int", context__.to_vec());
            Nprofile = int(0);
            vals_i__ = context__.vals_i("Nprofile");
            pos__ = 0;
            Nprofile = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nprofile", Nprofile, 0);

            current_statement_begin__ = 7;
            validate_non_negative_index("interaction_qids", "Ninteraction", Ninteraction);
            context__.validate_dims("data initialization", "interaction_qids", "int", context__.to_vec(Ninteraction));
            interaction_qids = std::vector<int>(Ninteraction, int(0));
            vals_i__ = context__.vals_i("interaction_qids");
            pos__ = 0;
            size_t interaction_qids_k_0_max__ = Ninteraction;
            for (size_t k_0__ = 0; k_0__ < interaction_qids_k_0_max__; ++k_0__) {
                interaction_qids[k_0__] = vals_i__[pos__++];
            }
            size_t interaction_qids_i_0_max__ = Ninteraction;
            for (size_t i_0__ = 0; i_0__ < interaction_qids_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "interaction_qids[i_0__]", interaction_qids[i_0__], 0);
                check_less_or_equal(function__, "interaction_qids[i_0__]", interaction_qids[i_0__], Nq);
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("interaction_in_profile", "Ninteraction", Ninteraction);
            validate_non_negative_index("interaction_in_profile", "Nprofile", Nprofile);
            context__.validate_dims("data initialization", "interaction_in_profile", "int", context__.to_vec(Ninteraction,Nprofile));
            interaction_in_profile = std::vector<std::vector<int> >(Ninteraction, std::vector<int>(Nprofile, int(0)));
            vals_i__ = context__.vals_i("interaction_in_profile");
            pos__ = 0;
            size_t interaction_in_profile_k_0_max__ = Ninteraction;
            size_t interaction_in_profile_k_1_max__ = Nprofile;
            for (size_t k_1__ = 0; k_1__ < interaction_in_profile_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < interaction_in_profile_k_0_max__; ++k_0__) {
                    interaction_in_profile[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t interaction_in_profile_i_0_max__ = Ninteraction;
            size_t interaction_in_profile_i_1_max__ = Nprofile;
            for (size_t i_0__ = 0; i_0__ < interaction_in_profile_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < interaction_in_profile_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "interaction_in_profile[i_0__][i_1__]", interaction_in_profile[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "interaction_in_profile[i_0__][i_1__]", interaction_in_profile[i_0__][i_1__], 1);
                }
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("Q", "Nq", Nq);
            validate_non_negative_index("Q", "Nskill", Nskill);
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec(Nq,Nskill));
            Q = std::vector<std::vector<int> >(Nq, std::vector<int>(Nskill, int(0)));
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            size_t Q_k_0_max__ = Nq;
            size_t Q_k_1_max__ = Nskill;
            for (size_t k_1__ = 0; k_1__ < Q_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Q_k_0_max__; ++k_0__) {
                    Q[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t Q_i_0_max__ = Nq;
            size_t Q_i_1_max__ = Nskill;
            for (size_t i_0__ = 0; i_0__ < Q_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < Q_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "Q[i_0__][i_1__]", Q[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "Q[i_0__][i_1__]", Q[i_0__][i_1__], 1);
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("skill_in_profile", "Nskill", Nskill);
            validate_non_negative_index("skill_in_profile", "Nprofile", Nprofile);
            context__.validate_dims("data initialization", "skill_in_profile", "int", context__.to_vec(Nskill,Nprofile));
            skill_in_profile = std::vector<std::vector<int> >(Nskill, std::vector<int>(Nprofile, int(0)));
            vals_i__ = context__.vals_i("skill_in_profile");
            pos__ = 0;
            size_t skill_in_profile_k_0_max__ = Nskill;
            size_t skill_in_profile_k_1_max__ = Nprofile;
            for (size_t k_1__ = 0; k_1__ < skill_in_profile_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < skill_in_profile_k_0_max__; ++k_0__) {
                    skill_in_profile[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t skill_in_profile_i_0_max__ = Nskill;
            size_t skill_in_profile_i_1_max__ = Nprofile;
            for (size_t i_0__ = 0; i_0__ < skill_in_profile_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < skill_in_profile_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "skill_in_profile[i_0__][i_1__]", skill_in_profile[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "skill_in_profile[i_0__][i_1__]", skill_in_profile[i_0__][i_1__], 1);
                }
            }

            current_statement_begin__ = 11;
            validate_non_negative_index("X", "Nz", Nz);
            validate_non_negative_index("X", "Nq", Nq);
            context__.validate_dims("data initialization", "X", "int", context__.to_vec(Nz,Nq));
            X = std::vector<std::vector<int> >(Nz, std::vector<int>(Nq, int(0)));
            vals_i__ = context__.vals_i("X");
            pos__ = 0;
            size_t X_k_0_max__ = Nz;
            size_t X_k_1_max__ = Nq;
            for (size_t k_1__ = 0; k_1__ < X_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t X_i_0_max__ = Nz;
            size_t X_i_1_max__ = Nq;
            for (size_t i_0__ = 0; i_0__ < X_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < X_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "X[i_0__][i_1__]", X[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "X[i_0__][i_1__]", X[i_0__][i_1__], 1);
                }
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 15;
            validate_non_negative_index("theta", "Nprofile", Nprofile);
            num_params_r__ += (Nprofile - 1);
            current_statement_begin__ = 16;
            validate_non_negative_index("intercepts", "Nq", Nq);
            num_params_r__ += (1 * Nq);
            current_statement_begin__ = 17;
            validate_non_negative_index("base_effects", "Nq", Nq);
            validate_non_negative_index("base_effects", "Nskill", Nskill);
            num_params_r__ += ((1 * Nq) * Nskill);
            current_statement_begin__ = 18;
            validate_non_negative_index("interaction_effects", "Ninteraction", Ninteraction);
            num_params_r__ += (1 * Ninteraction);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~modelb38a751d76082_stanmodelcode() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 15;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "Nprofile", Nprofile);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(Nprofile));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(Nprofile);
        size_t theta_j_1_max__ = Nprofile;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 16;
        if (!(context__.contains_r("intercepts")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable intercepts missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("intercepts");
        pos__ = 0U;
        validate_non_negative_index("intercepts", "Nq", Nq);
        context__.validate_dims("parameter initialization", "intercepts", "double", context__.to_vec(Nq));
        std::vector<double> intercepts(Nq, double(0));
        size_t intercepts_k_0_max__ = Nq;
        for (size_t k_0__ = 0; k_0__ < intercepts_k_0_max__; ++k_0__) {
            intercepts[k_0__] = vals_r__[pos__++];
        }
        size_t intercepts_i_0_max__ = Nq;
        for (size_t i_0__ = 0; i_0__ < intercepts_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(intercepts[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable intercepts: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 17;
        if (!(context__.contains_r("base_effects")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable base_effects missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("base_effects");
        pos__ = 0U;
        validate_non_negative_index("base_effects", "Nq", Nq);
        validate_non_negative_index("base_effects", "Nskill", Nskill);
        context__.validate_dims("parameter initialization", "base_effects", "double", context__.to_vec(Nq,Nskill));
        std::vector<std::vector<double> > base_effects(Nq, std::vector<double>(Nskill, double(0)));
        size_t base_effects_k_0_max__ = Nq;
        size_t base_effects_k_1_max__ = Nskill;
        for (size_t k_1__ = 0; k_1__ < base_effects_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < base_effects_k_0_max__; ++k_0__) {
                base_effects[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t base_effects_i_0_max__ = Nq;
        size_t base_effects_i_1_max__ = Nskill;
        for (size_t i_0__ = 0; i_0__ < base_effects_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < base_effects_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_lb_unconstrain(0, base_effects[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable base_effects: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }

        current_statement_begin__ = 18;
        if (!(context__.contains_r("interaction_effects")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable interaction_effects missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("interaction_effects");
        pos__ = 0U;
        validate_non_negative_index("interaction_effects", "Ninteraction", Ninteraction);
        context__.validate_dims("parameter initialization", "interaction_effects", "double", context__.to_vec(Ninteraction));
        std::vector<double> interaction_effects(Ninteraction, double(0));
        size_t interaction_effects_k_0_max__ = Ninteraction;
        for (size_t k_0__ = 0; k_0__ < interaction_effects_k_0_max__; ++k_0__) {
            interaction_effects[k_0__] = vals_r__[pos__++];
        }
        size_t interaction_effects_i_0_max__ = Ninteraction;
        for (size_t i_0__ = 0; i_0__ < interaction_effects_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(interaction_effects[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable interaction_effects: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.simplex_constrain(Nprofile, lp__);
            else
                theta = in__.simplex_constrain(Nprofile);

            current_statement_begin__ = 16;
            std::vector<local_scalar_t__> intercepts;
            size_t intercepts_d_0_max__ = Nq;
            intercepts.reserve(intercepts_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < intercepts_d_0_max__; ++d_0__) {
                if (jacobian__)
                    intercepts.push_back(in__.scalar_constrain(lp__));
                else
                    intercepts.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 17;
            std::vector<std::vector<local_scalar_t__> > base_effects;
            size_t base_effects_d_0_max__ = Nq;
            size_t base_effects_d_1_max__ = Nskill;
            base_effects.resize(base_effects_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < base_effects_d_0_max__; ++d_0__) {
                base_effects[d_0__].reserve(base_effects_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < base_effects_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        base_effects[d_0__].push_back(in__.scalar_lb_constrain(0, lp__));
                    else
                        base_effects[d_0__].push_back(in__.scalar_lb_constrain(0));
                }
            }

            current_statement_begin__ = 18;
            std::vector<local_scalar_t__> interaction_effects;
            size_t interaction_effects_d_0_max__ = Ninteraction;
            interaction_effects.reserve(interaction_effects_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < interaction_effects_d_0_max__; ++d_0__) {
                if (jacobian__)
                    interaction_effects.push_back(in__.scalar_constrain(lp__));
                else
                    interaction_effects.push_back(in__.scalar_constrain());
            }

            // transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("log_theta", "Nprofile", Nprofile);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_theta(Nprofile);
            stan::math::initialize(log_theta, DUMMY_VAR__);
            stan::math::fill(log_theta, DUMMY_VAR__);
            stan::math::assign(log_theta,stan::math::log(theta));

            current_statement_begin__ = 23;
            validate_non_negative_index("mylogits", "Nq", Nq);
            validate_non_negative_index("mylogits", "Nprofile", Nprofile);
            std::vector<std::vector<local_scalar_t__> > mylogits(Nq, std::vector<local_scalar_t__>(Nprofile, local_scalar_t__(0)));
            stan::math::initialize(mylogits, DUMMY_VAR__);
            stan::math::fill(mylogits, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 25;
            for (int iprofile = 1; iprofile <= Nprofile; ++iprofile) {

                current_statement_begin__ = 26;
                for (int iquestion = 1; iquestion <= Nq; ++iquestion) {
                    {
                    current_statement_begin__ = 27;
                    local_scalar_t__ myprob(DUMMY_VAR__);
                    (void) myprob;  // dummy to suppress unused var warning
                    stan::math::initialize(myprob, DUMMY_VAR__);
                    stan::math::fill(myprob, DUMMY_VAR__);
                    stan::math::assign(myprob,get_base1(intercepts, iquestion, "intercepts", 1));


                    current_statement_begin__ = 28;
                    for (int iskill = 1; iskill <= Nskill; ++iskill) {

                        current_statement_begin__ = 29;
                        if (as_bool((primitive_value(logical_eq(get_base1(get_base1(Q, iquestion, "Q", 1), iskill, "Q", 2), 1)) && primitive_value(logical_eq(get_base1(get_base1(skill_in_profile, iskill, "skill_in_profile", 1), iprofile, "skill_in_profile", 2), 1))))) {

                            current_statement_begin__ = 30;
                            stan::math::assign(myprob, (myprob + get_base1(get_base1(base_effects, iquestion, "base_effects", 1), iskill, "base_effects", 2)));
                        }
                    }
                    current_statement_begin__ = 33;
                    for (int i_interaction = 1; i_interaction <= Ninteraction; ++i_interaction) {

                        current_statement_begin__ = 34;
                        if (as_bool((primitive_value(logical_eq(get_base1(interaction_qids, i_interaction, "interaction_qids", 1), iquestion)) && primitive_value(logical_eq(get_base1(get_base1(interaction_in_profile, i_interaction, "interaction_in_profile", 1), iprofile, "interaction_in_profile", 2), 1))))) {

                            current_statement_begin__ = 36;
                            stan::math::assign(myprob, (myprob + get_base1(interaction_effects, i_interaction, "interaction_effects", 1)));
                        }
                    }
                    current_statement_begin__ = 39;
                    stan::model::assign(mylogits, 
                                stan::model::cons_list(stan::model::index_uni(iquestion), stan::model::cons_list(stan::model::index_uni(iprofile), stan::model::nil_index_list())), 
                                myprob, 
                                "assigning variable mylogits");
                    }
                }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 22;
            size_t log_theta_j_1_max__ = Nprofile;
            for (size_t j_1__ = 0; j_1__ < log_theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 23;
            size_t mylogits_k_0_max__ = Nq;
            size_t mylogits_k_1_max__ = Nprofile;
            for (size_t k_0__ = 0; k_0__ < mylogits_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < mylogits_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(mylogits[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mylogits" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mylogits: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body

            current_statement_begin__ = 45;
            for (int iquestion = 1; iquestion <= Nq; ++iquestion) {

                current_statement_begin__ = 46;
                lp_accum__.add(normal_log<propto__>(get_base1(intercepts, iquestion, "intercepts", 1), 0, 5));
            }
            current_statement_begin__ = 48;
            for (int iquestion = 1; iquestion <= Nq; ++iquestion) {

                current_statement_begin__ = 49;
                for (int iskill = 1; iskill <= Nskill; ++iskill) {

                    current_statement_begin__ = 50;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(base_effects, iquestion, "base_effects", 1), iskill, "base_effects", 2), 0, 5));
                }
            }
            current_statement_begin__ = 53;
            for (int i_interaction = 1; i_interaction <= Ninteraction; ++i_interaction) {

                current_statement_begin__ = 54;
                lp_accum__.add(normal_log<propto__>(get_base1(interaction_effects, i_interaction, "interaction_effects", 1), 0, 5));
            }
            current_statement_begin__ = 57;
            for (int iperson = 1; iperson <= Nz; ++iperson) {
                {
                current_statement_begin__ = 58;
                validate_non_negative_index("lps", "Nprofile", Nprofile);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lps(Nprofile);
                stan::math::initialize(lps, DUMMY_VAR__);
                stan::math::fill(lps, DUMMY_VAR__);
                stan::math::assign(lps,log_theta);


                current_statement_begin__ = 59;
                for (int iprofile = 1; iprofile <= Nprofile; ++iprofile) {

                    current_statement_begin__ = 60;
                    for (int iquestion = 1; iquestion <= Nq; ++iquestion) {

                        current_statement_begin__ = 61;
                        stan::model::assign(lps, 
                                    stan::model::cons_list(stan::model::index_uni(iprofile), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(lps, stan::model::cons_list(stan::model::index_uni(iprofile), stan::model::nil_index_list()), "lps") + bernoulli_logit_log(get_base1(get_base1(X, iperson, "X", 1), iquestion, "X", 2), get_base1(get_base1(mylogits, iquestion, "mylogits", 1), iprofile, "mylogits", 2))), 
                                    "assigning variable lps");
                    }
                }
                current_statement_begin__ = 64;
                lp_accum__.add(log_sum_exp(lps));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("intercepts");
        names__.push_back("base_effects");
        names__.push_back("interaction_effects");
        names__.push_back("log_theta");
        names__.push_back("mylogits");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Nprofile);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nq);
        dims__.push_back(Nskill);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ninteraction);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nprofile);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nq);
        dims__.push_back(Nprofile);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "modelb38a751d76082_stanmodelcode_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.simplex_constrain(Nprofile);
        size_t theta_j_1_max__ = Nprofile;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            vars__.push_back(theta(j_1__));
        }

        std::vector<double> intercepts;
        size_t intercepts_d_0_max__ = Nq;
        intercepts.reserve(intercepts_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < intercepts_d_0_max__; ++d_0__) {
            intercepts.push_back(in__.scalar_constrain());
        }
        size_t intercepts_k_0_max__ = Nq;
        for (size_t k_0__ = 0; k_0__ < intercepts_k_0_max__; ++k_0__) {
            vars__.push_back(intercepts[k_0__]);
        }

        std::vector<std::vector<double> > base_effects;
        size_t base_effects_d_0_max__ = Nq;
        size_t base_effects_d_1_max__ = Nskill;
        base_effects.resize(base_effects_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < base_effects_d_0_max__; ++d_0__) {
            base_effects[d_0__].reserve(base_effects_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < base_effects_d_1_max__; ++d_1__) {
                base_effects[d_0__].push_back(in__.scalar_lb_constrain(0));
            }
        }
        size_t base_effects_k_0_max__ = Nq;
        size_t base_effects_k_1_max__ = Nskill;
        for (size_t k_1__ = 0; k_1__ < base_effects_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < base_effects_k_0_max__; ++k_0__) {
                vars__.push_back(base_effects[k_0__][k_1__]);
            }
        }

        std::vector<double> interaction_effects;
        size_t interaction_effects_d_0_max__ = Ninteraction;
        interaction_effects.reserve(interaction_effects_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < interaction_effects_d_0_max__; ++d_0__) {
            interaction_effects.push_back(in__.scalar_constrain());
        }
        size_t interaction_effects_k_0_max__ = Ninteraction;
        for (size_t k_0__ = 0; k_0__ < interaction_effects_k_0_max__; ++k_0__) {
            vars__.push_back(interaction_effects[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("log_theta", "Nprofile", Nprofile);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_theta(Nprofile);
            stan::math::initialize(log_theta, DUMMY_VAR__);
            stan::math::fill(log_theta, DUMMY_VAR__);
            stan::math::assign(log_theta,stan::math::log(theta));

            current_statement_begin__ = 23;
            validate_non_negative_index("mylogits", "Nq", Nq);
            validate_non_negative_index("mylogits", "Nprofile", Nprofile);
            std::vector<std::vector<double> > mylogits(Nq, std::vector<double>(Nprofile, double(0)));
            stan::math::initialize(mylogits, DUMMY_VAR__);
            stan::math::fill(mylogits, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 25;
            for (int iprofile = 1; iprofile <= Nprofile; ++iprofile) {

                current_statement_begin__ = 26;
                for (int iquestion = 1; iquestion <= Nq; ++iquestion) {
                    {
                    current_statement_begin__ = 27;
                    local_scalar_t__ myprob(DUMMY_VAR__);
                    (void) myprob;  // dummy to suppress unused var warning
                    stan::math::initialize(myprob, DUMMY_VAR__);
                    stan::math::fill(myprob, DUMMY_VAR__);
                    stan::math::assign(myprob,get_base1(intercepts, iquestion, "intercepts", 1));


                    current_statement_begin__ = 28;
                    for (int iskill = 1; iskill <= Nskill; ++iskill) {

                        current_statement_begin__ = 29;
                        if (as_bool((primitive_value(logical_eq(get_base1(get_base1(Q, iquestion, "Q", 1), iskill, "Q", 2), 1)) && primitive_value(logical_eq(get_base1(get_base1(skill_in_profile, iskill, "skill_in_profile", 1), iprofile, "skill_in_profile", 2), 1))))) {

                            current_statement_begin__ = 30;
                            stan::math::assign(myprob, (myprob + get_base1(get_base1(base_effects, iquestion, "base_effects", 1), iskill, "base_effects", 2)));
                        }
                    }
                    current_statement_begin__ = 33;
                    for (int i_interaction = 1; i_interaction <= Ninteraction; ++i_interaction) {

                        current_statement_begin__ = 34;
                        if (as_bool((primitive_value(logical_eq(get_base1(interaction_qids, i_interaction, "interaction_qids", 1), iquestion)) && primitive_value(logical_eq(get_base1(get_base1(interaction_in_profile, i_interaction, "interaction_in_profile", 1), iprofile, "interaction_in_profile", 2), 1))))) {

                            current_statement_begin__ = 36;
                            stan::math::assign(myprob, (myprob + get_base1(interaction_effects, i_interaction, "interaction_effects", 1)));
                        }
                    }
                    current_statement_begin__ = 39;
                    stan::model::assign(mylogits, 
                                stan::model::cons_list(stan::model::index_uni(iquestion), stan::model::cons_list(stan::model::index_uni(iprofile), stan::model::nil_index_list())), 
                                myprob, 
                                "assigning variable mylogits");
                    }
                }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t log_theta_j_1_max__ = Nprofile;
                for (size_t j_1__ = 0; j_1__ < log_theta_j_1_max__; ++j_1__) {
                    vars__.push_back(log_theta(j_1__));
                }
                size_t mylogits_k_0_max__ = Nq;
                size_t mylogits_k_1_max__ = Nprofile;
                for (size_t k_1__ = 0; k_1__ < mylogits_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < mylogits_k_0_max__; ++k_0__) {
                        vars__.push_back(mylogits[k_0__][k_1__]);
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "modelb38a751d76082_stanmodelcode";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_j_1_max__ = Nprofile;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t intercepts_k_0_max__ = Nq;
        for (size_t k_0__ = 0; k_0__ < intercepts_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "intercepts" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t base_effects_k_0_max__ = Nq;
        size_t base_effects_k_1_max__ = Nskill;
        for (size_t k_1__ = 0; k_1__ < base_effects_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < base_effects_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "base_effects" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t interaction_effects_k_0_max__ = Ninteraction;
        for (size_t k_0__ = 0; k_0__ < interaction_effects_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "interaction_effects" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t log_theta_j_1_max__ = Nprofile;
            for (size_t j_1__ = 0; j_1__ < log_theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mylogits_k_0_max__ = Nq;
            size_t mylogits_k_1_max__ = Nprofile;
            for (size_t k_1__ = 0; k_1__ < mylogits_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mylogits_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mylogits" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t theta_j_1_max__ = (Nprofile - 1);
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t intercepts_k_0_max__ = Nq;
        for (size_t k_0__ = 0; k_0__ < intercepts_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "intercepts" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t base_effects_k_0_max__ = Nq;
        size_t base_effects_k_1_max__ = Nskill;
        for (size_t k_1__ = 0; k_1__ < base_effects_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < base_effects_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "base_effects" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t interaction_effects_k_0_max__ = Ninteraction;
        for (size_t k_0__ = 0; k_0__ < interaction_effects_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "interaction_effects" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t log_theta_j_1_max__ = Nprofile;
            for (size_t j_1__ = 0; j_1__ < log_theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mylogits_k_0_max__ = Nq;
            size_t mylogits_k_1_max__ = Nprofile;
            for (size_t k_1__ = 0; k_1__ < mylogits_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mylogits_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mylogits" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef modelb38a751d76082_stanmodelcode_namespace::modelb38a751d76082_stanmodelcode stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif

