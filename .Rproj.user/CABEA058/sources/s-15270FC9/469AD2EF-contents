#' Simulate CDM Xdata
#'
#'@param Nskill Number of skills to simulate
#'@param seed Fix seed for reproducibility
#'@return Returns simulated X and Q-matrix
#'@export
simulate_cdm_data<-function(Nrespondents=20,
                            Nquestions=22,
                            Nskill=3,
                            Ntime=1,
                            Ngroup=1,
                            respondent_designmat=Matrix(rep(1,Nrespondents),Nrespondents,1),
                            group_designmat=Matrix(rep(1,Ngroup),Ngroup,1),
                            group_assignments=NULL,
                            seed=NULL,
                            true_params=NULL,
                            true_skill_transprob=NULL,
                            Q=NULL,
                            true_profiles=NULL){

  if(!is.null(seed)){
    set.seed(seed)
  }


  Nprofile=2^Nskill

  if(is.null(group_assignments)){
    #if not specified assume only one group
    group_assignments=c(1,Nrespondents)
  }
  Ngroup=length(unique(group_assignments))
  if(is.null(Q)){
    profile_list=gen_profile_list(Nprofile)
    #Some profiles may be excluded if Nquestions/Nprofile is not an integer
    Q=do.call(rbind,lapply(profile_list,function(x)
      do.call(rbind,lapply(1:ceiling(Nquestions/(Nprofile)),function(i) x))))%>%
      .[1:Nquestions,]
  }

  Xdata=list(Ns=list(Nrespondents=Nrespondents,Ntime=Ntime,
                      Nquestions=Nquestions,Nrespcov=Nrespcov,
                      Ngroupcov=Ngroupcov,Ngroup=Ngroup,
                      Nskill=Nskill,Nprofile=Nprofile),
            Q=Q,
            group_designmat=group_designmat,
            respondent_designmat=respondent_designmat)

  if(is.null(true_params)){
    true_params=gen_initial_values_longitudinal(Nrespondents,Q,
                                                Nrespcov=Nrespcov,Ngroupcov=Ngroupcov,
                                                Ngroup=Ngroup,seed=myseed)
  }

  #generate transition matrices
  transition_probabilities=generate_transition_probabilities(true_params,Xdata,ret_prof_trans = T)
  if(is.null(true_profiles)){
    #give an even distribution for profiles at time 1
    true_profiles=list(
      c(sapply(1:Nprofile,function(x) rep(x,ceiling(Nrespondents/Nprofile))))[1:Nrespondents]
    )
    #Use transition probability matrix at future times:
    trans_probs=generate_transition_probabilities(true_params,Xdata,ret_prof_trans=T)$profile
    if(Ntime>1){
      for(t in 2:Ntime){
        true_profiles[[t]]=map_int(1:Nrespondents,function(r) sample(Nprofile,1,prob=trans_probs[[t-1]][[r]][true_profiles[[t-1]][r],]))
      }
    }
  }

  q_info=generate_q_info(Q)
  interaction_qids=q_info$interaction_qids

  true_probs=logit(generate_logits_discrete(true_params,q_info))
  Xs=map(1:Ntime,function(t) t(sapply(true_profiles[[t]],function(y) sapply(true_probs[,y],function(p) sample(c(0,1),size=1,prob=c(1-p,p))))))
  Xdata[['Xs']]=Xs
  return(list(Xdata=Xdata,Q=Q,true_attributes=true_profiles,true_params=true_params))
}


generate_transition_probabilities=function(params,Xdata,
                                           g=logit,
                                           ret_prof_trans=F){
  forward_transitions=lapply(2:params$Ns$Ntime,function(t)
    g(sapply(1:params$Ns$Nskill,function(s) apply(params$forward_beta[[t-1]][[s]][group_assignments,]*Xdata$respondent_designmat,1,sum))))
  backward_transitions=lapply(2:params$Ns$Ntime,function(t)
    g(sapply(1:params$Ns$Nskill,function(s) apply(params$backward_betas[[t-1]][[s]][group_assignments,]*Xdata$respondent_designmat,1,sum))))

  if(ret_prof_trans){
    get_transmat=function(t,r){
      retval=matrix(NA,Xdata$Ns$Nprofile,Xdata$Ns$Nprofile)
      for(p1 in 1:Xdata$Ns$Nprofile){
        for(p2 in 1:Xdata$Ns$Nprofile){
          profile1=profile_list[[p1]]
          profile2=profile_list[[p2]]
          retval[p1,p2]=exp(sum(
            log(1-backward_transitions[[t-1]][r,])*(profile1*profile2) +
              log(forward_transitions[[t-1]][r,])*(1-profile1)*profile2 +
              log(backward_transitions[[t-1]][r,])*(1-profile2)*profile1 +
              log(1-forward_transitions[[t-1]][r,])*(1-profile2)*(1-profile1)))
        }
      }
      return(retval)
    }
    profile_list=generate_q_info(Xdata$Q)$profile_list
    profile_transitions=lapply(2:Xdata$Ns$Ntime,function(t) lapply(1:Xdata$Ns$Nrespondents,function(r) get_transmat(t,r)))
  }else{
    profile_transitions=NA
  }
  return(list(forward=forward_transitions,
              backward=backward_transitions,
              profile=profile_transitions))
}


#' Simulate CDM Xdata
#'
#'@param Nskill Number of skills to simulate
#'@param seed Fix seed for reproducibility
#'@return Returns simulated X and Q-matrix
#'@export
simulated_cdm_data_old<-function(Nskill=3,Nresp_per_profile=20,
                             Nq_per_profile=3,seed=123,time_points=2){
  if(!is.na(seed)){
    set.seed(seed)
  }
  Nprofile=2^Nskill
  profile_list=gen_profile_list(Nprofile)

  Q=do.call(rbind,lapply(profile_list[-1],function(x)
    do.call(rbind,lapply(1:Nq_per_profile,function(i) x))))

  Nq=dim(Q)[1]

  q_info=generate_q_info(Q)
  interaction_in_profile=q_info$interaction_in_profile
  interaction_qids=q_info$interaction_qids
  interaction_list=q_info$interaction_list
  skill_in_profile=q_info$skill_in_profile
  profile_list=q_info$profile_list
  q_profiles=q_info$q_profiles

  intercepts=stats::rnorm(Nq,mean=-3,sd=.1)
  base_effects=matrix(NA,Nq,Nskill)
  base_effects[-unique(interaction_qids),]=rnorm(Nskill*(Nq-length(unique(interaction_qids))),mean=6,sd=.1)
  base_effects[unique(interaction_qids),]=rnorm(Nskill*length(unique(interaction_qids)),mean=3,sd=.1)
  base_effects[q_profiles==8,]=rnorm(Nskill*sum(q_profiles==8),mean=2,sd=.1)
  interactions=rnorm(length(interaction_qids),mean=0,sd=.1)

  true_attributes=c(sapply(1:Nprofile,function(x) rep(x,Nresp_per_profile)))
  Nz=length(true_attributes)

  true_logits=generate_logit_probabilities_discrete(intercepts,
                                           base_effects,
                                           interactions,
                                           q_info)$logits
  true_probs=logit(true_logits)
  X=t(sapply(true_attributes,function(y) sapply(true_probs[,y],
                                                    function(p) sample(c(0,1),size=1,prob=c(1-p,p)))))


  return(list(X=X,Q=Q,true_attributes=true_attributes))
}

gen_profile_list=function(Nprofile){
  profile_list=list()
  for(ii in 1:(2^Nskill)){
    tmp=rep(NA,Nskill)
    for(jj in 1:Nskill){
      tmp[Nskill-jj+1]=((ii-1)%/%(2^(jj-1)))%%2
    }
    profile_list[[ii]]=rev(tmp)
  }
  return(profile_list)
}

