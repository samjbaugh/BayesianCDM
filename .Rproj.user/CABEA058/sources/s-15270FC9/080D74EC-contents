
gen_initial_values_longitudinal<-function(Nrespondents,Q,Ntime=2,
                                          Nrespcov=0,Ngroupcov=0,
                                          Ngroup=2,seed=NA){
  if(!is.null(seed)){
    set.seed(seed)
  }
  # if(Ngroup>2){
  #   print("For Ngroup>2 not implemented")
  #   return(NA)
  # }
  Nskill=dim(Q)[2]
  Nquestions=dim(Q)[1]
  Nprofile=2^Nskill

  q_info=generate_q_info(Q)

  intercepts=rnorm(Nquestions,mean=-3,sd=.1)
  base_effects=matrix(NA,Nquestions,Nskill)
  base_effects[-unique(q_info$interaction_qids),]=
    rnorm(Nskill*(Nquestions-length(unique(q_info$interaction_qids))),mean=6,sd=.1)
  base_effects[unique(q_info$interaction_qids),]=
    rnorm(Nskill*length(unique(q_info$interaction_qids)),mean=3,sd=.1)
  base_effects[q_info$q_profiles==8,]=rnorm(Nskill*sum(q_info$q_profiles==8),mean=2,sd=.1)
  interactions=rnorm(length(q_info$interaction_qids),mean=0,sd=.1)

  #right now only one response covariate is allowed
  gen_forward=function(x) {
    forward_beta=matrix(rnorm(Ngroup*(Nrespcov+1),sd=.5),Ngroup,Nrespcov+1)
    forward_beta[,1]=c(-2,2)
    forward_beta
  }
  #first index is over time, second is over skills
  forward_betas=lapply(1:(Ntime-1),function(x) lapply(1:Nskill,gen_forward))
  backward_betas=lapply(1:(Ntime-1),function(x) lapply(1:Nskill,function(x) matrix(-2,Ngroup,Nrespcov+1)))

  gamma_mat=matrix(rnorm(Nrespcov*(Ngroupcov+1)),Nrespcov,Ngroupcov+1)

  value_key=c(rep('intercepts',length(intercepts)),
              rep('base_effects',length(c(base_effects))),
              rep('interactions',length(c(interactions))))
  init_vals=list('Ns'=list(Nrespondents=Nrespondents,Ntime=Ntime,
                           Nquestions=Nquestions,Nrespcov=Nrespcov,
                           Ngroupcov=Ngroupcov,Ngroup=Ngroup,
                           Nskill=Nskill,Nprofile=Nprofile),
                 'theta'=c(intercepts,base_effects,interactions),
                 'log_lambda'=log(rep(1,Nprofile)/Nprofile),
                 'value_key'=value_key,
                 'gamma'=gamma_mat,
                 'forward_betas'=forward_betas,
                 'backward_betas'=backward_betas)
  return(init_vals)
}
