---
title: "Tutorial: Diagnostic Model Fits"
output:
  html_document:
    df_print: paged
  pdf_document: default
  html_notebook: default
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

Versions:

\begin{enumerate}
  \item one
\end{enumerate}

Generate simulated data:

```{r}
devtools::load_all(".")
# require(cdmfits)
require(tidyverse)

simout=simulated_cdm_data(Nskill=3,seed=123,Nresp_per_profile = 20)
X=simout$X
Q=simout$Q
true_attributes=simout$true_attributes

model_names=c('mcmc_cdmfits',
              'variational',
              'em_cdmfits',
              'variational_em_cdmfits',
              'mcmc_stan',
              'gdina_CDM')%>%set_names(.,.)
fit_info=data.frame(name=model_names,
                    t=NA,accuracy=NA)
```

Fit standard MCMC model with 1000 iterations (takes about twenty seconds):

```{r}
M=1000

t1=system.time({stored_parameters=run_mcmc_sampler_discrete(X,Q,M,verb=T)})

last_iter=stored_parameters[[length(stored_parameters)]]
pred_profs_mcmc=vals_to_preds(last_iter,Q)

fit_info['mcmc_cdmfits','accuracy']=mean(pred_profs_mcmc==true_attributes)
print('done')
```

<!-- CMD Package fit using gdina (takes ~.3 seconds): -->

<!-- ```{r} -->
<!-- #takes .1 seconds -->
<!-- require('CDM') -->
<!-- sink('/dev/null') -->
<!-- t2=system.time({mod1 <- CDM::gdina( data=X, q.matrix=Q, linkfct='logit')}) -->
<!-- sink() -->
<!-- # A=mod1$probitem%>% -->
<!-- # LL=pivot_wider(id_cols=itemno,names_from=skillcomb,values_from=prob) -->
<!-- accuracy=mean(mod1$pattern$mle.est==c('000','100','010','110','001','101','011','111')[true_attributes]) -->

<!-- fit_info['gdina_CDM','t']=t2[3] -->
<!-- fit_info['gdina_CDM','accuracy']=accuracy -->
<!-- ``` -->

Variational Bayes:

```{r}
#this requires cmdstanr to be installed:
require(cmdstanr)

variational_setup(X,Q,program_name='cdm_discrete',data_name='discrete_test',
                  recompile=F)

tstan=system.time({
  variational_out=variational_discrete(program_name='cdm_discrete',
                                       data_name='discrete_test',run=T)
}) 

probout=variational_out_to_preds(variational_out,Q)

accuracy=mean(mod1$pattern$mle.est==c('000','100','010','110','001','101','011','111')[true_attributes])

fit_info['mcmc_stan','t']=tstan[3]
fit_info['mcmc_stan','accuracy']=accuracy
```

Expectation maximization:

```{r}
init_vals=gen_initial_values(X,Q)

log_theta=init_vals$log_theta
value_key=init_vals$value_key

gen_logits_em<-function(values){
  mylogits=matrix(NA,Nprofile,Nq)
  for(i in 1:Nprofile){
    for(j in 1:Nq){
      mylogits[i,j]=logit(mean(X[values==i,j]))
    }
  }
  return(t(mylogits))
}
Nz=dim(X)[1]
Nprofile=length(init_vals$log_theta) #8
Nq=dim(X)[2] #21
t_em=system.time({
  vals=sort(sample(1:8,Nz,rep=T))
  emlogits=gen_logits_em(vals)
  error_level=1 
  while(error_level>1e-12){
    old_vals=vals
    old_emblogits=emlogits
    
    #maximization
    vals=liks_from_logits(emlogits,X,q_info)%>%
      pred_prof_from_liks()
    print(vals)
    emlogits=gen_logits_em(vals)
    error_level=mean(abs(old_emblogits-emlogits),na.rm = T)
  }
})
mean(vals==true_attributes)

pred_profs_em=vals
fit_info['em_cdmfits','t']=t_em[3]
fit_info['em_cdmfits','accuracy']=mean(pred_profs_em==true_attributes)
```

Variational EM:

```{r}

#maximization:
nlambda=length(init_vals$lambda)
ELBO_opt_wrapper=function(x){
  variational_dist=list(lambda_mean=x[1:nlambda],
                        lambda_sd=x[(nlambda+1):(2*nlambda)])
  return(cdm_discrete_VEM_ELBO(variational_dist,X,Q,init_vals))
}
init_lambda_sd=sd(init_vals$lambda)
init_lambda_distvec=c(init_vals$lambda,
                   rep(init_lambda_sd,nlambda))
ELBO_opt_wrapper(init_lambda_distvec)
t_vem=system.time({optout_em=optim(init_lambda_distvec,ELBO_opt_wrapper,control=list(trace=6))})

lambda_postmean=init_lambda_distvec[1:nlambda]
lambda_postsd=init_lambda_distvec[(nlambda+1):(2*nlambda)]
opt_vals_vem=list(lambda=lambda_postmean,
              value_key=value_key,
              log_theta=log_theta)

pred_profs_vem=vals_to_preds(opt_vals_vem,Q)

fit_info['variational_em_cdmfits','t']=t_vem[3]
fit_info['variational_em_cdmfits','accuracy']=mean(pred_profs_vem==true_attributes)
```


MCMC Continuous:

```{r}
M=1000

init_vals_continuous=gen_initial_values_continuous(X,Q)

t1=system.time({stored_parameters=run_mcmc_sampler_continuous(X,Q,M,verb=T)})

last_iter=stored_parameters[[length(stored_parameters)]]
pred_profs_mcmc=vals_to_preds(last_iter,Q)

fit_info['mcmc_cdmfits','accuracy']=mean(pred_profs_mcmc==true_attributes)
print('done')
```
<!-- Continuous EM: -->

<!-- ```{r} -->
<!-- inputvals=init_vals -->

<!-- log_theta=inputvals$log_theta -->
<!-- value_key=inputvals$value_key -->

<!-- gen_logits_em<-function(values){ -->
<!--   mylogits=matrix(NA,Nprofile,Nq) -->
<!--   for(i in 1:Nprofile){ -->
<!--     for(j in 1:Nq){ -->
<!--       mylogits[i,j]=logit(mean(X[values==i,j])) -->
<!--     } -->
<!--   } -->
<!--   return(t(mylogits)) -->
<!-- } -->
<!-- Nz=dim(X)[1] -->
<!-- Nprofile=8 #length(inputvals$lambda) -->
<!-- Nq=21 #length(inputvals$log_theta) -->
<!-- t_em=system.time({ -->
<!--   vals=sort(sample(1:8,Nz,rep=T)) -->
<!--   emlogits=gen_logits_em(vals) -->
<!--   for(i in 1:100){ -->
<!--     print(i) -->
<!--     old_vals=vals -->
<!--     old_emblogits=emlogits -->

<!--     emlogits=gen_logits_em(vals) -->
<!--     #maximization -->
<!--     vals=liks_from_logits(emlogits,X,q_info)%>% -->
<!--       pred_prof_from_liks() -->
<!--     if(mean(abs(old_emblogits-emlogits))<1e-12){ -->
<!--       break -->
<!--     } -->
<!--   } -->
<!-- }) -->
<!-- mean(vals==true_attributes) -->

<!-- pred_profs_em=vals -->
<!-- fit_info['em_cdmfits','t']=t_em[3] -->
<!-- fit_info['em_cdmfits','accuracy']=mean(pred_profs_em==true_attributes) -->

<!-- ``` -->

<!-- <!-- MCMC fit using stan (takes ~300 seconds) --> -->

<!-- <!-- ```{r} --> -->
<!-- <!-- require(cmdstanr) --> -->
<!-- <!-- write_data_to_json(X,Q,'~/cmdstan/programs/cdm_data.json') --> -->
<!-- <!-- # stan_make('cdm') --> -->
<!-- <!-- tstan=system.time({variational_out=stan_variational('cdm','cdm_data.json',run=T)}) --> -->

<!-- <!-- stan_out=rstan::read_stan_csv(paste('variational_out.csv',sep='')) --> -->
<!-- <!-- stan_out=rstan::extract(stan_out) --> -->
<!-- <!-- probout=stan_out_to_preds(stan_out,Q) --> -->
<!-- <!-- accuracy=mean(probout==true_attributes) --> -->

<!-- <!-- fit_info['variational','t']=tstan[3] --> -->
<!-- <!-- fit_info['variational','accuracy']=accuracy --> -->
<!-- <!-- ``` --> -->
