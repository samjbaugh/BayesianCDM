#' Generate initial values for mcmc sampler
#'
#' @param X Matrix of item-response correctness values
#' @param Q Q-matrix
#' @return Returns a list of initial values including intercepts, base effects,
#' interactions, and mixture probabilities.
#' @import CDM
#' @export
gen_initial_values<-function(X,Q,seed=NA){
  if(!is.na(seed)){
    set.seed(seed)
  }
  Nz=dim(X)[1]
  Nq=dim(X)[2]
  Nskill=dim(Q)[2]
  Nprofile=2^Nskill

  q_info=generate_q_info(Q)

  set.seed(224)
  if(T){
    intercepts=rnorm(Nq,mean=-3,sd=.1)
    base_effects=matrix(NA,Nq,Nskill)
    base_effects[-unique(q_info$interaction_qids),]=
      rnorm(Nskill*(Nq-length(unique(q_info$interaction_qids))),mean=6,sd=.1)
    base_effects[unique(q_info$interaction_qids),]=
      rnorm(Nskill*length(unique(q_info$interaction_qids)),mean=3,sd=.1)
    base_effects[q_info$q_profiles==8,]=rnorm(Nskill*sum(q_info$q_profiles==8),mean=2,sd=.1)
    interactions=rnorm(length(q_info$interaction_qids),mean=0,sd=.1)
  }else{
    intercepts=rnorm(Nq)
    base_effects=matrix(rnorm(Nq*Nskill),Nq,Nskill)
    interactions=rnorm(length(q_info$interaction_qids))
  }


  value_key=c(rep('intercepts',length(intercepts)),
              rep('base_effects',length(c(base_effects))),
              rep('interactions',length(c(interactions))))
  init_vals=list('lambda'=c(intercepts,
                            base_effects,
                            interactions),
                 'log_theta'=log(rep(1,Nprofile)/Nprofile),
                 'value_key'=value_key)
  return(init_vals)
}

gen_initial_values_continuous<-function(X,Q,seed=NA){
  if(!is.na(seed)){
    set.seed(seed)
  }
  Nz=dim(X)[1]
  Nq=dim(X)[2]
  Nskill=dim(Q)[2]
  Nprofile=2^Nskill

  q_info=generate_q_info(Q)

  set.seed(224)
  if(T){
    intercepts=rnorm(Nq,mean=-3,sd=.1)
    base_effects=matrix(NA,Nq,Nskill)
    base_effects[-unique(q_info$interaction_qids),]=
      rnorm(Nskill*(Nq-length(unique(q_info$interaction_qids))),mean=6,sd=.1)
    base_effects[unique(q_info$interaction_qids),]=
      rnorm(Nskill*length(unique(q_info$interaction_qids)),mean=3,sd=.1)
    base_effects[q_info$q_profiles==8,]=rnorm(Nskill*sum(q_info$q_profiles==8),mean=2,sd=.1)
    interactions=rnorm(length(q_info$interaction_qids),mean=0,sd=.1)
  }else{
    intercepts=rnorm(Nq)
    base_effects=matrix(rnorm(Nq*Nskill),Nq,Nskill)
    interactions=rnorm(length(q_info$interaction_qids))
  }


  value_key=c(rep('intercepts',length(intercepts)),
              rep('base_effects',length(c(base_effects))),
              rep('interactions',length(c(interactions))))
  init_vals=list('lambda'=c(intercepts,
                            base_effects,
                            interactions),
                 'log_theta'=log(rep(1,Nprofile)/Nprofile),
                 'value_key'=value_key,
                 'continuous_effects'=matrix(rnorm(Nskill*Nz),Nskill,Nz))
  return(init_vals)
}


gen_initial_values_longitudinal_old<-function(Nrespondents,Q,seed=NA){
  if(!is.na(seed)){
    set.seed(seed)
  }
  Nskill=dim(Q)[2]
  Nquestions=dim(Q)[1]
  Nprofile=2^Nskill

  q_info=generate_q_info(Q)

  set.seed(224)
  intercepts=rnorm(Nquestions,mean=-3,sd=.1)
  base_effects=matrix(NA,Nquestions,Nskill)
  base_effects[-unique(q_info$interaction_qids),]=
    rnorm(Nskill*(Nquestions-length(unique(q_info$interaction_qids))),mean=6,sd=.1)
  base_effects[unique(q_info$interaction_qids),]=
    rnorm(Nskill*length(unique(q_info$interaction_qids)),mean=3,sd=.1)
  base_effects[q_info$q_profiles==8,]=rnorm(Nskill*sum(q_info$q_profiles==8),mean=2,sd=.1)
  interactions=rnorm(length(q_info$interaction_qids),mean=0,sd=.1)

  beta_mat_f=matrix(rnorm(Nskill*Nrespondents),Nskill,Nrespondents)
  beta_mat_b=matrix(0,Nskill,Nrespondents)
  beta_mat_b[,1]=-3
  value_key=c(rep('intercepts',length(intercepts)),
              rep('base_effects',length(c(base_effects))),
              rep('interactions',length(c(interactions))))
  init_vals=list('lambda'=c(intercepts,
                            base_effects,
                            interactions),
                 'log_theta'=log(rep(1,Nprofile)/Nprofile),
                 'value_key'=value_key,
                 'beta_mat_f'=beta_mat_f,
                 'beta_mat_b'=beta_mat_b)
  return(init_vals)
}

