---
title: "Example Fits: Diagnostic Model Continuous"
output:
  html_document:
  df_print: paged
pdf_document: default
html_notebook: default
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.

Versions:

\begin{enumerate}
\item one
\end{enumerate}

Generate simulated data:

```{r}
devtools::load_all(".")
# require(cdmfits)
require(tidyverse)

simout=simulated_cdm_data(Nskill=3,seed=123,Nresp_per_profile = 20)
X=simout$X
Q=simout$Q
true_attributes=simout$true_attributes

model_names=c('mcmc_cdmfits',
              'variational',
              'em_cdmfits',
              'variational_em_cdmfits',
              'mcmc_stan',
              'gdina_CDM')%>%set_names(.,.)
fit_info=data.frame(name=model_names,
                    t=NA,accuracy=NA)
```

Fit standard MCMC model with 1000 iterations (takes about twenty seconds):

```{r}
M=1000

init_vals_continuous=gen_initial_values_continuous(X,Q)

t1=system.time({stored_parameters=run_mcmc_sampler_continuous(X,Q,M,verb=T)})

last_iter=stored_parameters[[length(stored_parameters)]]
pred_profs_mcmc=vals_to_preds(last_iter,Q)

fit_info['mcmc_cdmfits','accuracy']=mean(pred_profs_mcmc==true_attributes)
print('done')
```


Variational Bayes:

```{r}
#this requires cmdstanr to be installed:
require(cmdstanr)

variational_setup(X,Q,program_name='cdm_continuous',data_name='continuous_test',
                  recompile=F)

tstan=system.time({
  variational_out=variational_continuous(program_name='cdm_continuous',
                                       data_name='continuous_test',run=T)
})

probout=variational_out_to_preds(variational_out,Q)

accuracy=mean(mod1$pattern$mle.est==c('000','100','010','110','001','101','011','111')[true_attributes])

fit_info['mcmc_stan','t']=tstan[3]
fit_info['mcmc_stan','accuracy']=accuracy
```

Expectation maximization:

```{r}
init_vals=gen_initial_values_continuous(X,Q)

log_theta=init_vals$log_theta
value_key=init_vals$value_key

Nz=dim(X)[1]
Nprofile=length(init_vals$log_theta) #8
Nq=dim(X)[2] #21
t_em=system.time({
  vals=sort(sample(1:8,Nz,rep=T))
  emlogits=gen_logits_em_continuous(vals)
  error_level=1
  while(error_level>1e-12){
    old_vals=vals
    old_emblogits=emlogits

    #maximization
    vals=liks_from_logits_continuous(emlogits,X,q_info)%>%
      pred_prof_from_liks()
    print(vals)
    emlogits=gen_logits_em(vals)
    continuous_max=maximize_continuous_logits(vals)
    error_level=mean(abs(old_emblogits-emlogits),na.rm = T)
  }
})
mean(vals==true_attributes)

pred_profs_em=vals
fit_info['em_cdmfits','t']=t_em[3]
fit_info['em_cdmfits','accuracy']=mean(pred_profs_em==true_attributes)
```

Variational EM:

```{r}

#maximization:
nlambda=length(init_vals$lambda)
dim_alpha=length(init_vals$continuous_effects)
nalpha=prod(dim_alpha)
ELBO_opt_wrapper=function(x){
  variational_dist=list(lambda_mean=x[1:nlambda],
                        lambda_sd=x[(nlambda+1):(2*nlambda)],
                        continuous_effects_mean=x[1:nalpha],
                        continuous_effects_sd=x[(nalpha+1):(2*nalpha)])
  return(cdm_continuous_VEM_ELBO(variational_dist,X,Q,init_vals))
}
init_lambda_sd=sd(init_vals$lambda)
init_lambda_distvec=c(init_vals$lambda,
                      rep(init_lambda_sd,nlambda))
ELBO_opt_wrapper(init_lambda_distvec)
t_vem=system.time({optout_em=optim(init_lambda_distvec,ELBO_opt_wrapper,control=list(trace=6))})

lambda_postmean=init_lambda_distvec[1:nlambda]
lambda_postsd=init_lambda_distvec[(nlambda+1):(2*nlambda)]
continuous_effects_postmean=init_lambda_distvec[1:nalpha]
continuous_effects_postsd=init_lambda_distvec[(nalpha+1):(2*nalpha)]
opt_vals_vem=list(lambda=lambda_postmean,
                  value_key=value_key,
                  log_theta=log_theta,
                  continuous_effects=matrix(continuous_effects_postmean,
                                            Nskill,Nz))

pred_profs_vem=vals_to_preds_continuous(opt_vals_vem,Q)

fit_info['variational_em_cdmfits','t']=t_vem[3]
fit_info['variational_em_cdmfits','accuracy']=mean(pred_profs_vem==true_attributes)
```
