Xdata
nparams=length(vb_vec)/2
vb_mean=vb_vec[1:nparams]
vb_var=vb_vec[(nparams+1):(2*nparams)]
q_info=gen_q_info(Q)
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
value_vec=map_dbl(1:nsamples,samp_ELBO)
nsamples=20
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
value_vec=map_dbl(1:nsamples,samp_ELBO)
paraminfo=initial_params
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
value_vec=map_dbl(1:nsamples,samp_ELBO)
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
length(myvec)
nparams
names(vb_mean)
params=convert_vector_to_params(myvec,paraminfo)
response_probs=logit(generate_logits_discrete(params,q_info))
log_trans_probs=gen_trans_probs(params,Xdata,ret_prof_trans=T)$profile
Nprofile=params$Ns$Nprofile
response_probs=logit(generate_logits_discrete(params,q_info))
log_trans_probs=gen_trans_probs(params,Xdata,ret_prof_trans=T)$profile
Xdata$Xs%>%length
Xdata$Xs[[1]]%>%dim
params
params
forward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$forward_betas[group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
backward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$backward_betas[group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
g=logit
forward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$forward_betas[group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
backward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$backward_betas[group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
dim(Xdata$respondent_designmat)
dim(params$forward_betas)
length(group_assignments)
source("~/Dropbox/MJProjects/CogDiagModels/cdmfits/R/simulate_data.R", echo=TRUE)
Xdata=simulate_cdm_data(Nrespondents=Nrespondents,
Nquestions=Nquestions,
Nskill=Nskill,
Ntime=Ntime,
Ngroup=Ngroup,
group_assignments=group_assignments,
seed=myseed,
true_params=true_params,
Q=Q,
respondent_designmat=respondent_designmat,
group_designmat=group_designmat)$Xdata
Xdata$group_assignments
Xdata$group_assignments%>%length
Nrespondents
Nrespondents=50
Nquestions=21
#two group assignments
Ngroup=2
Ntime=2
group_assignments=map(1:Ngroup,function(i) rep(i,ceiling(Nrespondents/Ngroup)))%>%
{do.call(c,.)}%>%.[1:Nrespondents]
myseed=2171506
Nskill=3
Nprofile=2^Nskill
Q=gen_profile_list(Nprofile)%>%
{do.call(rbind,lapply(.,function(x)
do.call(rbind,lapply(1:ceiling(Nquestions/(Nprofile)),function(i) x))))%>%
.[1:Nquestions,]}
Nrespcov=2
Ngroupcov=2
true_params=gen_initial_values_longitudinal(Nrespondents,Q,Ngroup=2,seed=myseed,
Nrespcov=Nrespcov,Ngroupcov=Ngroupcov)
respondent_designmat=cbind(rep(1,Nrespondents),matrix(rnorm(Nrespondents*Ngroup,sd=.2),Nrespondents,Nrespcov))
group_designmat=cbind(rep(1,Ngroup),matrix(rnorm(Nrespondents*Ngroup,sd=.2),Ngroup,Ngroupcov))
Xdata=simulate_cdm_data(Nrespondents=Nrespondents,
Nquestions=Nquestions,
Nskill=Nskill,
Ntime=Ntime,
Ngroup=Ngroup,
group_assignments=group_assignments,
seed=myseed,
true_params=true_params,
Q=Q,
respondent_designmat=respondent_designmat,
group_designmat=group_designmat)$Xdata
initial_params=gen_initial_values_longitudinal(Nrespondents,Q=Q,Nrespondents=Nrespondents,
Ntime=Ntime)
nparams=length(vb_vec)/2
vb_mean=vb_vec[1:nparams]
vb_var=vb_vec[(nparams+1):(2*nparams)]
q_info=gen_q_info(Q)
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
value_vec=map_dbl(1:nsamples,samp_ELBO)
devtools::load_all(".")
rm(list = c("cdm_ELBO_logistic", "cdm_ELBO_probit", "simulate_cdm_data", "variational_fit"))
devtools::load_all(".")
nparams=length(vb_vec)/2
vb_mean=vb_vec[1:nparams]
vb_var=vb_vec[(nparams+1):(2*nparams)]
q_info=gen_q_info(Q)
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
value_vec=map_dbl(1:nsamples,samp_ELBO)
forward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$forward_betas[Xdata$group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
dim(params$forward_betas)
initial_params$forward_betas
# if(Ngroup>2){
#   print("For Ngroup>2 not implemented")
#   return(NA)
# }
Nskill=dim(Q)[2]
Nquestions=dim(Q)[1]
Nprofile=2^Nskill
q_info=gen_q_info(Q)
intercepts=rnorm(Nquestions,mean=-3,sd=.1)
base_effects=matrix(NA,Nquestions,Nskill)
base_effects[-unique(q_info$interaction_qids),]=
rnorm(Nskill*(Nquestions-length(unique(q_info$interaction_qids))),mean=6,sd=.1)
base_effects[unique(q_info$interaction_qids),]=
rnorm(Nskill*length(unique(q_info$interaction_qids)),mean=3,sd=.1)
base_effects[q_info$q_profiles==8,]=rnorm(Nskill*sum(q_info$q_profiles==8),mean=2,sd=.1)
interactions=rnorm(length(q_info$interaction_qids),mean=0,sd=.1)
gen_forward=function(s) {
set.seed(123)
forward_beta=array(rnorm(Ngroup*(Nrespcov+1),sd=.5),c(Ngroup,Nrespcov+1))
#simulate different group base effects
forward_beta[,1]=seq(-2,2,length=Ngroup)
return(forward_beta)
}
gen_backward=function(s){
return(matrix(-2,Ngroup,Nrespcov+1))
}
gen_names=function(t,s){
outer(1:Ngroup,1:(Nrespcov+1),function(g,v) paste0('_g',g,'_v',v-1,'_s',s,'_t',t))
}
#can recover vector from array(vec,c(Ngroup,Nrespcov+1,Nskill,Ntime-1))
forward_betas=simplify2array(lapply(1:(Ntime-1),function(t) simplify2array(lapply(1:Nskill,gen_forward))))
dim(forward_betas)
initial_params$forward_betas%>%dim
Nrespondents
Ntime
Nrespcov
Ngroupcov
Ngroup
if(!is.null(seed)){
set.seed(seed)
}
# if(Ngroup>2){
#   print("For Ngroup>2 not implemented")
#   return(NA)
# }
Nskill=dim(Q)[2]
Nquestions=dim(Q)[1]
Nprofile=2^Nskill
q_info=gen_q_info(Q)
intercepts=rnorm(Nquestions,mean=-3,sd=.1)
base_effects=matrix(NA,Nquestions,Nskill)
base_effects[-unique(q_info$interaction_qids),]=
rnorm(Nskill*(Nquestions-length(unique(q_info$interaction_qids))),mean=6,sd=.1)
base_effects[unique(q_info$interaction_qids),]=
rnorm(Nskill*length(unique(q_info$interaction_qids)),mean=3,sd=.1)
base_effects[q_info$q_profiles==8,]=rnorm(Nskill*sum(q_info$q_profiles==8),mean=2,sd=.1)
interactions=rnorm(length(q_info$interaction_qids),mean=0,sd=.1)
gen_forward=function(s) {
set.seed(123)
forward_beta=array(rnorm(Ngroup*(Nrespcov+1),sd=.5),c(Ngroup,Nrespcov+1))
#simulate different group base effects
forward_beta[,1]=seq(-2,2,length=Ngroup)
return(forward_beta)
}
gen_backward=function(s){
return(matrix(-2,Ngroup,Nrespcov+1))
}
gen_names=function(t,s){
outer(1:Ngroup,1:(Nrespcov+1),function(g,v) paste0('_g',g,'_v',v-1,'_s',s,'_t',t))
}
#can recover vector from array(vec,c(Ngroup,Nrespcov+1,Nskill,Ntime-1))
forward_betas=simplify2array(lapply(1:(Ntime-1),function(t) simplify2array(lapply(1:Nskill,gen_forward))))
backward_betas=simplify2array(lapply(1:(Ntime-1),function(t) simplify2array(lapply(1:Nskill,gen_backward))))
dim(forward_betas)
#can recover vector from array(vec,c(Nrespcov+1,Ngroupcov+1))
gamma_mat=matrix(rnorm((Nrespcov+1)*(Ngroupcov+1)),Nrespcov+1,Ngroupcov+1)
gamma_names=outer(1:(Nrespcov+1),1:(Ngroupcov+1),function(v,w) paste0('gamma_v',v-1,'_w',w-1))
value_key=c(rep('intercepts',length(intercepts)),
rep('base_effects',length(c(base_effects))),
rep('interactions',length(c(interactions))))
base_effect_tags=c(outer(1:Nskill,1:Nquestions,function(s,i) paste0('_s',s,'_i',i)))
int_tags=q_info$interaction_list%>%map('interaction')%>%
map_chr(function(x) paste0('(',x[1],',',x[2],')'))
theta_names=c(paste0('theta0_i',1:length(intercepts)),
paste0('theta',base_effect_tags),
paste0('theta_',int_tags))
init_vals=list(Ns=list(Nrespondents=Nrespondents,Ntime=Ntime,
Nquestions=Nquestions,Nrespcov=Nrespcov,
Ngroupcov=Ngroupcov,Ngroup=Ngroup,
Nskill=Nskill,Nprofile=Nprofile),
theta=c(intercepts,base_effects,interactions),
log_lambda=log(rep(1,Nprofile)/Nprofile),
value_key=value_key,
beta_names=beta_names,
gamma_names=gamma_names,
gamma=gamma_mat,
forward_betas=forward_betas,
backward_betas=backward_betas,
theta_names=theta_names)
#can recover vector from array(vec,c(Ngroup,Nrespcov+1,Nskill,Ntime-1))
forward_betas=simplify2array(lapply(1:(Ntime-1),function(t) simplify2array(lapply(1:Nskill,gen_forward))))
backward_betas=simplify2array(lapply(1:(Ntime-1),function(t) simplify2array(lapply(1:Nskill,gen_backward))))
beta_names=simplify2array(lapply(1:(Ntime-1),function(t) simplify2array(lapply(1:Nskill,function(s) gen_names(t,s)))))
#can recover vector from array(vec,c(Nrespcov+1,Ngroupcov+1))
gamma_mat=matrix(rnorm((Nrespcov+1)*(Ngroupcov+1)),Nrespcov+1,Ngroupcov+1)
gamma_names=outer(1:(Nrespcov+1),1:(Ngroupcov+1),function(v,w) paste0('gamma_v',v-1,'_w',w-1))
value_key=c(rep('intercepts',length(intercepts)),
rep('base_effects',length(c(base_effects))),
rep('interactions',length(c(interactions))))
base_effect_tags=c(outer(1:Nskill,1:Nquestions,function(s,i) paste0('_s',s,'_i',i)))
int_tags=q_info$interaction_list%>%map('interaction')%>%
map_chr(function(x) paste0('(',x[1],',',x[2],')'))
theta_names=c(paste0('theta0_i',1:length(intercepts)),
paste0('theta',base_effect_tags),
paste0('theta_',int_tags))
init_vals=list(Ns=list(Nrespondents=Nrespondents,Ntime=Ntime,
Nquestions=Nquestions,Nrespcov=Nrespcov,
Ngroupcov=Ngroupcov,Ngroup=Ngroup,
Nskill=Nskill,Nprofile=Nprofile),
theta=c(intercepts,base_effects,interactions),
log_lambda=log(rep(1,Nprofile)/Nprofile),
value_key=value_key,
beta_names=beta_names,
gamma_names=gamma_names,
gamma=gamma_mat,
forward_betas=forward_betas,
backward_betas=backward_betas,
theta_names=theta_names)
dim(forward_betas)
devtools::load_all(".")
initial_params=gen_initial_values_longitudinal(Nrespondents,Q=Q,
Nrespondents=Nrespondents,
Ntime=Ntime)
Nrespondents
Nrespondents
Ntime
Nrespcov
initial_params=gen_initial_values_longitudinal(Nrespondents,Q=Q,
Nrespcov=Nrespcov,
Ngroupcov=Ngroupcov,
Ntime=Ntime)
dim(initial_params$forward_betas)
initial_params=gen_initial_values_longitudinal(Nrespondents,Q=Q,
# Nrespcov=Nrespcov,
# Ngroupcov=Ngroupcov,
Ntime=Ntime)
dim(initial_params$forward_betas)
initial_params=gen_initial_values_longitudinal(Nrespondents,Q=Q,
Nrespcov=Nrespcov,
Ngroupcov=Ngroupcov,
Ntime=Ntime)
tvar=system.time({variational_out=variational_fit(initial_params,maxiter=100)})
nresamp=1000
nparams=length(vb_vec)/2
vb_mean=vb_vec[1:nparams]
vb_var=vb_vec[(nparams+1):(2*nparams)]
q_info=gen_q_info(Q)
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
value_vec=map_dbl(1:nsamples,samp_ELBO)
forward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$forward_betas[Xdata$group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
params=convert_params_to_vector(initial_params)
dim(initial_params$backward_betas)
forward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$forward_betas[Xdata$group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
dim(params$forward_betas)
params
params=initial_params
forward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$forward_betas[Xdata$group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
backward_transitions=lapply(2:params$Ns$Ntime,function(t)
g(sapply(1:params$Ns$Nskill,function(s) apply(params$backward_betas[Xdata$group_assignments,,s,t-1]*Xdata$respondent_designmat,1,sum))))
if(ret_prof_trans){
get_transmat=function(t,r){
retval=matrix(NA,Xdata$Ns$Nprofile,Xdata$Ns$Nprofile)
for(p1 in 1:Xdata$Ns$Nprofile){
for(p2 in 1:Xdata$Ns$Nprofile){
profile1=profile_list[[p1]]
profile2=profile_list[[p2]]
retval[p1,p2]=exp(sum(
log(1-backward_transitions[[t-1]][r,])*(profile1*profile2) +
log(forward_transitions[[t-1]][r,])*(1-profile1)*profile2 +
log(backward_transitions[[t-1]][r,])*(1-profile2)*profile1 +
log(1-forward_transitions[[t-1]][r,])*(1-profile2)*(1-profile1)))
}
}
return(retval)
}
profile_list=gen_q_info(Xdata$Q)$profile_list
profile_transitions=lapply(2:Xdata$Ns$Ntime,function(t) lapply(1:Xdata$Ns$Nrespondents,function(r) get_transmat(t,r)))
}else{
profile_transitions=NA
}
return(list(forward=forward_transitions,
backward=backward_transitions,
profile=profile_transitions))
ret_prof_trans=T
if(ret_prof_trans){
get_transmat=function(t,r){
retval=matrix(NA,Xdata$Ns$Nprofile,Xdata$Ns$Nprofile)
for(p1 in 1:Xdata$Ns$Nprofile){
for(p2 in 1:Xdata$Ns$Nprofile){
profile1=profile_list[[p1]]
profile2=profile_list[[p2]]
retval[p1,p2]=exp(sum(
log(1-backward_transitions[[t-1]][r,])*(profile1*profile2) +
log(forward_transitions[[t-1]][r,])*(1-profile1)*profile2 +
log(backward_transitions[[t-1]][r,])*(1-profile2)*profile1 +
log(1-forward_transitions[[t-1]][r,])*(1-profile2)*(1-profile1)))
}
}
return(retval)
}
profile_list=gen_q_info(Xdata$Q)$profile_list
profile_transitions=lapply(2:Xdata$Ns$Ntime,function(t) lapply(1:Xdata$Ns$Nrespondents,function(r) get_transmat(t,r)))
}else{
profile_transitions=NA
}
response_probs=logit(generate_logits_discrete(params,q_info))
log_trans_probs=gen_trans_probs(params,Xdata,ret_prof_trans=T)$profile
Nprofile=params$Ns$Nprofile
Ntime=params$Ns$Ntime
Nrespondents=params$Ns$Nrespondents
Nquestions=params$Ns$Nquestions
#calculate data likelihood
Xs=Xdata$Xs
person_lik=function(r){
lvals=array(NA,c(Nquestions,Nprofile,Nprofile,Ntime-1))
for(t in 2:Ntime){
for(p1 in 1:Nprofile){
for(p2 in 1:Nprofile){
lvals[,p1,p2,t-1]=
log_trans_probs[[t-1]][[r]][p1,p2]+
dbinom(Xs[[t-1]][r,],1,response_probs[,p1],log=T)+
dbinom(Xs[[t]][r,],1,response_probs[,p2],log=T)
}
}
}
retval=log_sum_exp(apply(lvals,c(2,3),sum))
return(sum(retval))
}
retval=sum(map_dbl(1:Nrespondents,person_lik))
retval
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
paraminfo=initial_params
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
nparams=length(vb_vec)/2
vb_mean=vb_vec[1:nparams]
vb_var=vb_vec[(nparams+1):(2*nparams)]
q_info=gen_q_info(Q)
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
value_vec=map_dbl(1:nsamples,samp_ELBO)
value_vec
#compute log likleihood term
term1=mean(value_vec)
#compute variational var term
term2=sum(log(vb_var)/2)
#compute prior term
prior_term=-sum(vb_mean^2)-
sum(vb_var)
source("~/Dropbox/MJProjects/CogDiagModels/cdmfits/R/fit_variational.R", echo=TRUE)
dim(Xdata$Xs[[1]])
nparams=length(vb_vec)/2
if(is.null(prior_info)){
prior_means=rep(0,nparams)
prior_var=rep(1,nparams)
}else{
prior_means=prior_info$prior_mean
prior_var=prior_info$prior_var
}
nparams=length(vb_vec)/2
if(is.null(prior_info)){
prior_means=rep(0,nparams)
prior_var=rep(1,nparams)
}else{
prior_means=prior_info$prior_mean
prior_var=prior_info$prior_var
}
#' Generate initial values from longitudinal cdm model
#'
#' @param variational_dist Variational distributions, including means and vars
#' @param Xdata Data list
#' @param Q Q-matrix
#' @param init_vals Initial values
#' @return Returns value of ELBO function at variational dists
#' @export
cdm_ELBO_logistic=function(vb_vec,Xdata,paraminfo,Q,nsamples=20){
nparams=length(vb_vec)/2
prior_means=prior_info$prior_mean
prior_vars=prior_info$prior_var
vb_mean=vb_vec[1:nparams]
vb_var=vb_vec[(nparams+1):(2*nparams)]
q_info=gen_q_info(Q)
samp_ELBO=function(vec){
myvec=rnorm(nparams,mean=vb_mean,sd=sqrt(vb_var))%>%
set_names(names(vb_mean))
likelihood_master(convert_vector_to_params(myvec,paraminfo),Xdata,q_info)
}
logliks=map_dbl(1:nsamples,samp_ELBO)
lik_term=sum(logliks)
variational_term=-sum((vb_mean^2+vb_var)/(vb_var)+log(vb_var))/2
prior_term=-sum((vb_mean*(vb_mean-2*prior_means)+vb_var)/(prior_vars))/2
return(-(lik_term+variational_term+prior_term))
}
paramvec=convert_params_to_vector(initial_params)
init_vb_vec=c(convert_params_to_vector(initial_params),rep(.1,length(paramvec)))
variational_vec=cbind()
Nparam=length(paramvec)
priors=list(prior_means=rep(0,Nparam),
prior_vars=rep(1,Nparam))
ELBO_function(vec,Xdata,initial_params,Q,priors,nsamples=5)
source("~/Dropbox/MJProjects/CogDiagModels/cdmfits/R/fit_variational.R", echo=TRUE)
ELBO_function=cdm_ELBO_logistic
ELBO_function(vec,Xdata,initial_params,Q,priors,nsamples=5)
paramvec=convert_params_to_vector(initial_params)
init_vb_vec=c(convert_params_to_vector(initial_params),rep(.1,length(paramvec)))
devtools::load_all(".")
rm(list = c("cdm_ELBO_logistic", "cdm_ELBO_probit", "variational_fit"))
library(cdmfits)
devtools::document()
devtools::build_manual()
generate_logits_discrete
response_probs
aux_vars=generate_logits_discrete(vb_mean,q_info)
vb_mean
aux_vars=generate_logits_discrete(convert_vector_to_params(vb_mean),q_info)
generate_logits_discrete
convert_vector_to_params
aux_vars=generate_logits_discrete(convert_vector_to_params(vb_mean,paraminfo),q_info)
source("~/Dropbox/MJProjects/CogDiagModels/cdmfits/R/likelihood_functions.R", echo=TRUE)
log_trans_probs=gen_trans_probs(params,Xdata,ret_prof_trans=T)$profile
log_trans_probs
prior_info
vb_mean
startsWith(names(vb_mean),'fbeta','bbeta','gamma')]
startsWith(names(vb_mean),'fbeta','bbeta','gamma')
startsWith(names(vb_mean),c('fbeta','bbeta','gamma'))
names(vb_mean[!startsWith(names(vb_mean),c('fbeta','bbeta','gamma'))])
help(startsWith)
vb_mean[!(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
#split into two sets of auxillary variables:
aux_means_xi=aux_means[!(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
aux_means_rho=aux_means[(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
aux_vars_xi=aux_vars[!(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
aux_vars_rho=aux_vars[(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
aux_means=generate_logits_discrete(convert_vector_to_params(vb_mean,paraminfo),q_info)
aux_vars=generate_logits_discrete(convert_vector_to_params(vb_var,paraminfo),q_info)
#split into two sets of auxillary variables:
aux_means_xi=aux_means[!(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
aux_means_rho=aux_means[(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
aux_vars_xi=aux_vars[!(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
aux_vars_rho=aux_vars[(startsWith(names(vb_mean),'fbeta') |
startsWith(names(vb_mean),'bbeta') |
startsWith(names(vb_mean),'gamma'))]
p`1`
p1=2
p2=3
